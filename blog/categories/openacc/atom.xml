<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Openacc | Curious Explorations]]></title>
  <link href="http://kmmankad.github.io/blog/categories/openacc/atom.xml" rel="self"/>
  <link href="http://kmmankad.github.io/"/>
  <updated>2016-04-19T07:59:23+05:30</updated>
  <id>http://kmmankad.github.io/</id>
  <author>
    <name><![CDATA[kmmankad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenACC: View Generated CUDA Code]]></title>
    <link href="http://kmmankad.github.io/blog/2016/04/19/openacc-view-generated-cuda-code/"/>
    <updated>2016-04-19T07:27:14+05:30</updated>
    <id>http://kmmankad.github.io/blog/2016/04/19/openacc-view-generated-cuda-code</id>
    <content type="html"><![CDATA[<p>This is going to be a short post on how one can view the actual compiler generated CUDA code when running OpenACC on NVIDIA hardware. It is a warmup to my upcoming post on where-data-goes-with-OpenACC&rsquo;s-various-data-directives.</p>

<p>When compiling a OpenACC accelerated program, heres what a canonical compile command would look like for the <a href="http://www.pgroup.com/resources/cuda-x86.htm">PGI compiler</a></p>

<pre><code class="sh">pgcc -I. -g -fast -Minfo -acc -ta=nvidia -o hex2base64.exe hex2base64.c main.c
</code></pre>

<p>(Yes, this is from my <a href="http://kmmankad.github.io/blog/2016/04/03/openacc-analyze/">first OpenACC tutorial</a>)</p>

<p>With these set of options, the intermediate PTX or CUDA code is not visible to the user. However, if we add <code>keepgpu,nollvm</code> to the <code>-ta=nvidia</code> option, then the compiler dumps those for us to see. With only <code>keepgpu</code>, you would get only the PTX source code and binaries.</p>

<pre><code class="sh">pgcc -I. -g -fast -Minfo -acc -ta=nvidia:keepgpu,nollvm -o hex2base64.exe hex2ba se64.c main.c
</code></pre>

<p>With this, ordinary OpenACC&rsquo;d code like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">encode_block</span><span class="p">(</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">input</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">output</span><span class="p">){</span>
</span><span class='line'>       <span class="c1">// &amp;hellip;.shortened for brevity&amp;hellip;.</span>
</span><span class='line'>    <span class="cp">#pragma acc data present(input[0:size]), present(base64_LUT[64]), copyout(output[0:4&lt;em&gt;size/3])</span>
</span><span class='line'>    <span class="cp">#pragma acc kernels</span>
</span><span class='line'>    <span class="cp">#pragma acc loop private(decoded_octets, k)</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// Calculate the output array position based</span>
</span><span class='line'>        <span class="c1">// on the input array position (loop iteration)</span>
</span><span class='line'>        <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="mi">4</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>   <span class="c1">// ....shortened for brevity....</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Would</span> <span class="n">generate</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">file</span> <span class="n">that</span> <span class="n">looks</span> <span class="n">like</span> <span class="k">this</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">cuda_runtime</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">pgi_cuda_runtime</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hex2base64</span><span class="p">.</span><span class="n">n001</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="n">__global__</span> <span class="n">__launch_bounds__</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="kt">void</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">encode_block_92_gpu</span><span class="p">(</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">tc1</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">signed</span> <span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="k">restrict</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">p3</span><span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">input</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">signed</span> <span class="kt">char</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="k">restrict</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">p4</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">decoded_octets</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">signed</span> <span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="k">restrict</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">p5</span><span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">base64_LUT</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">signed</span> <span class="kt">char</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">p6</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">output</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">x5</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">size</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i_1</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i_2</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i_3</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ui_1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">signed</span> <span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">_p_1</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_2</span><span class="p">,</span> <span class="o">*&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_3</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">x6</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">k</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i25s</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i26i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">signed</span> <span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">p27</span><span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">decoded_octets</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i25s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nl">_BB_8</span><span class="p">:</span> <span class="p">;</span>
</span><span class='line'>       <span class="n">i26i</span> <span class="o">=</span> <span class="p">((((</span><span class="kt">int</span><span class="p">)</span><span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">32</span><span class="p">))</span><span class="o">+</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">))</span><span class="o">+</span><span class="p">((</span><span class="kt">int</span><span class="p">)(</span><span class="n">i25s</span><span class="p">));</span>
</span><span class='line'>       <span class="k">if</span><span class="p">(</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)(</span><span class="n">i25s</span><span class="p">)</span><span class="o">&gt;=</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)(</span><span class="n">tc1</span><span class="p">)))</span>  <span class="k">goto</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">BB_9</span><span class="p">;</span>
</span><span class='line'>       <span class="k">if</span><span class="p">(</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)(</span><span class="n">i26i</span><span class="p">)</span><span class="o">&gt;=</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)(</span><span class="n">tc1</span><span class="p">)))</span>  <span class="k">goto</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">BB_9</span><span class="p">;</span>
</span><span class='line'>       <span class="n">p27</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">decoded_octets</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span> <span class="o">=</span> <span class="p">(</span><span class="n">p4</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">decoded_octets</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)(((((</span><span class="kt">int</span><span class="p">)</span><span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">))</span><span class="o">+</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">4</span><span class="p">)));</span>
</span><span class='line'>       <span class="n">_ui_1</span> <span class="o">=</span> <span class="p">(</span><span class="n">i26i</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>       <span class="c1">// &amp;hellip;.shortened for brevity&amp;hellip;.</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>While this is legal CUDA code, its quite cluttered. With a neato perl oneliner, we can get that a bit cleaner and easier to read:</p>

<pre><code class="sh">perl -pe 's/\w\d\/\*\s(\w+)\s\*\//$1/g' cluttered_openacc_cuda_code.c
</code></pre>

<p>Code is now:</p>

<pre><code class="c++">#include "cuda_runtime.h"
#include "pgi_cuda_runtime.h"
#include "hex2base64.n001.h"
extern "C" __global__ __launch_bounds__(32) void
encode_block_92_gpu(
        unsigned int tc1,
        signed char* __restrict__ input,
        signed char* __restrict__ decoded_octets,
        signed char* __restrict__ base64_LUT,
        signed char* output,
        unsigned int size)
{
    int _i_1, _i_2, _i_3;
    unsigned int _ui_1;
    signed char* _p_1, *_p_2, *_p_3;
    unsigned int k;
    unsigned int i25s;
    unsigned int i26i;
    signed char* decoded_octets;
    i25s = 0;
_BB_8: ;
       i26i = ((((int)blockIdx.x)*(32))+((int)threadIdx.x))+((int)(i25s));
       if( ((unsigned int)(i25s)&gt;=(unsigned int)(tc1)))  goto _BB_9;
       if( ((unsigned int)(i26i)&gt;=(unsigned int)(tc1)))  goto _BB_9;
       decoded_octets = (decoded_octets)+((long long)(((((int)blockIdx.x)*((int)blockDim.x))+((int)threadIdx.x))*(4)));
       _ui_1 = (i26i)*(3);
       k = ((_ui_1)*(4))/(3);
       _p_1 = (signed char*)((input)+((long long)(_ui_1)));
       *( signed char*)(decoded_octets) = (int)(*( signed char*)(( signed char*)_p_1))&gt;&gt;(2);
       *( signed char*)((output)+((long long)(k))) = (*( signed char*)((base64_LUT)+((long long)((*( signed char*)(decoded_octets))))));
       *( signed char*)((decoded_octets)+(1LL)) = ((*( signed char*)(( signed char*)_p_1))&amp;(3))&lt;&lt;(4);
       if( ((unsigned int)(((int)(_ui_1))+(1))&gt;=(unsigned int)(size)))  goto _BB_22;
       _ui_1 = (i26i)*(3);
       // ....shortened for brevity....
</code></pre>

<p>Much better.</p>

<p>Thats it! Hope this (and my next OpenACC post <code>TODO:insert link</code> ) helps you guys.</p>

<p>PS: I wonder if a screencast is a better medium for my (b)log.</p>
]]></content>
  </entry>
  
</feed>
