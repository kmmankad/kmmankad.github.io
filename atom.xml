<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Curious Explorations]]></title>
  <link href="http://kmmankad.github.io/atom.xml" rel="self"/>
  <link href="http://kmmankad.github.io/"/>
  <updated>2016-04-19T07:25:04+05:30</updated>
  <id>http://kmmankad.github.io/</id>
  <author>
    <name><![CDATA[kmmankad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Performance Prediction of CUDA Kernels]]></title>
    <link href="http://kmmankad.github.io/blog/2016/04/14/performance-prediction-of-cuda-kernels/"/>
    <updated>2016-04-14T06:38:26+05:30</updated>
    <id>http://kmmankad.github.io/blog/2016/04/14/performance-prediction-of-cuda-kernels</id>
    <content type="html"><![CDATA[<p>This post is going to be more loud thinking, and less code - (&lsquo;cuz there isn&rsquo;t any yet :) )</p>

<p>NVIDIA CUDA is supported on a wide range of hardware platforms they sell, right from their Tegra Mobile SoCs, notebook GPUs (thats what I have right now), desktop and workstation class GPUs, server class Tesla series, the most recent (and powerful) of which is the mighty <a href="http://www.nvidia.com/object/tesla-p100.html">Tesla P100</a>.</p>

<p>Over side a wide range of hardware and their relative cost, there must be a way for a potential buyer or user to establish (even approximately) how much $$ spent would result in what improvement in performance of their CUDA or OpenACC accelerated code. A couple of ways come to mind on how to achieve this, listed below.</p>

<ol>
<li><p>Create C++/SystemC models of <em>all</em> these available GPUs, and run your program on these to artifically judge their performance. Or,</p></li>
<li><p>Maybe they(NVDA) could provide the capability to &lsquo;test-drive&rsquo; these GPUs, say in the cloud for some trial period for users to judge their potential return on hardware investment. I recall seeing a link for something this somewhere in <a href="https://developer.nvidia.com/cuda-zone">CUDAZone</a> - though only for their Tesla M40 series. My guess is this service is made available via an <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html">GPU enabled AWS instance</a> that actually has an M40. So this idea could work, but is not scalable because we&rsquo;d need a whole room full of the entire product portfolio that we need to then allow N users access to. Bleh.</p></li>
<li><p>Hey, its April 2016. No, its not super relevant other than the fact that it&rsquo;ll mark a few months of my machine learning experience and that the world has just been introduced to DGX-1. More the latter :) The point I&rsquo;m making is we could adopt a <strong>Machine Learning based approach</strong>! Let me summarize this below:</p>

<ul>
<li><p>Create a feature vector for each CUDA kernel - This could be a bunch of stats from <a href="http://docs.nvidia.com/cuda/profiler-users-guide/#axzz46EPgphj2">nvprof</a>, NVIDIA&rsquo;s handy univeral profiler for all GPGPU code. Selecting the right features is the first step here. We&rsquo;d then do all the usual tricks with it. Normalize, scale etc, etc.</p></li>
<li><p>Then, once we can represent any CUDA kernel in the world with a feature vector, we&rsquo;d now need the data. Now the labelled training data in this case would be pairs of features-wallclock time. We could have the same kernels run on a range of hardware and generate the full spread of traning data. Given that nvprof already knows a whole lot about your kernel, this data collection would be best handled by it. Maybe, and I&rsquo;m getting crazy here - we could even crowdsource that data! Many programs already do that type of thing for usage data, so NVIDIA could add that to nvprof (&lsquo;<em>Do you want to submit anonymous report stats to NVIDIA? Click Yes to help the machines rise.</em>&rsquo;) That way, a ton of data would pour in (and keep pouring in) from customers, developers and datacenters all around the world. (Well thats only if the option to upload said data is not at an annoying point - like firefox meekly asks after it crashes. Do you want to report this.. <em>angry shouts</em> I dont care about you, damn mozilla! I just lost all my browsing data!)
I see the availability of data as the real bottleneck here for someone to create that. Once again, an example of the fact that <a href="https://medium.com/summer-ai/ai-s-big-trade-secret-a0d59110d6e3#.7z3h0ak3t">advances in machine learning are not going to come from people with the best ideas, algorithms or even the best hardware - but by who has the data</a>. Information is power.</p></li>
<li><p>Say you have this data. Then you could run your favorite regression algorithm to predict this! Bloody Brilliant! ..the added awesomeness comes from the fact that the crowd sourced data is like free fuel for this prediction engine!</p></li>
</ul>
</li>
</ol>


<p>But, I dont have that data, or the hardware to collect it. So, this idea kind of hits a dead end but I&rsquo;m leaving it around on the blog for now. I wonder if I could publish someplace&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenACC: Analyze, Express, Tweak! - Part 1]]></title>
    <link href="http://kmmankad.github.io/blog/2016/04/03/openacc-analyze/"/>
    <updated>2016-04-03T11:22:49+05:30</updated>
    <id>http://kmmankad.github.io/blog/2016/04/03/openacc-analyze</id>
    <content type="html"><![CDATA[<h2>Whats OpenACC?</h2>

<p>From <a href="http://developer.nvidia.com/openacc">http://developer.nvidia.com/openacc</a>:</p>

<blockquote><p>OpenACC is a directive-based programming model designed to provide a simple yet powerful approach to accelerators without significant programming effort.</p></blockquote>

<p>What that is means is, you can pickup existing code written for an x86 CPU, and add some compiler <code>#pragmas</code>, compile with an OpenACC capable compiler - and voila! You get accelerated binaries for a range of hardware accelerators - Nvidia GPUs, AMD GPUs and even Intel multi-core CPUs. Thats really the USP of OpenACC - a single copy of the source code will deliver performance portability across this range of hardware platforms.
So, to be successful with OpenACC all you need are strong concepts in parallel programming, some know-how about OpenACC syntax and you’re good to go! You dont need to really know too many lower level hardware details with OpenACC, as opposed to, maybe CUDA C. However, this is a double edged sword - I will revisit this later in this post. Remember, OpenACC is about expressing parallelism - its not GPU programming.</p>

<p>There are some really good tutorials on OpenACC itself available online:<br/>
1. <a href="https://devblogs.nvidia.com/parallelforall/getting-started-openacc/">Jeff Larkin&rsquo;s post on the Parallel Forall blog</a><br/>
2. Jeff Larkin&rsquo;s sessions from GTC 2013 - recordings on Youtube here : <a href="https://www.youtube.com/watch?v=0e5TiwZd_wE">Part1</a> <a href="https://www.youtube.com/watch?v=YueszvniRUE">Part2</a></p>

<p>The recommended approach for parallelism anywhere is to:<br/>
1. Try and use existing parallel optimized libraries like cuBLAS, cuDNN etc. if they exist for your application.<br/>
2. If you dont get those, try OpenACC on your code. That should get you about 80% of the maximum available performance.<br/>
<em>Ofcourse, that is a very rough number and is subject to, you guessed it, your code and the GPU hardware you&rsquo;re running.</em>
3. Roll your own CUDA kernels. This is definitely the most involved of the 3 options, but it will allow you to squeeze
every last drop of that good perf juice from your software and hardware.</p>

<p>OpenACC tutorials online often use the Jacobi Iteration/sAXPY example to demonstrate OpenACC, but all that those examples teach us are syntax constructs. However, if you use OpenACC in the real world, you’ll know it&rsquo;s all about how you analyze your source code, understand its scope for parallelism and finally express that formally via OpenACC syntax. What this post is really about is about the analysis of a simple program, which is hopefully a little less trivial than the Jacobi type examples all over the net. Also, this is not one of those <em>100X in 2 hours</em> posts, because that does not always happen.</p>

<h2>Setup</h2>

<p>First off, some logistics about tool installation and setup.</p>

<ul>
<li>We will be using the PGI Compiler today, which you can get from the <a href="http://www.pgroup.com/support/download_pgi2016.php?view=current">PGroup&rsquo;s site</a></li>
<li>You can also download the <a href="https://developer.nvidia.com/openacc-toolkit">OpenACC toolkit from NVIDIA</a></li>
</ul>


<p>If you have everything correctly setup, try <code>pgcc --version</code> as shown below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>PGI Workstation 15.10 <span class="o">(</span>64<span class="o">)</span>
</span><span class='line'>PGI<span class="nv">$ </span>pgcc --version
</span><span class='line'>
</span><span class='line'>pgcc 15.10-0 64-bit target on x86-64 Windows -tp haswell
</span><span class='line'>The Portland Group - PGI Compilers and Tools
</span><span class='line'>Copyright <span class="o">(</span>c<span class="o">)</span> 2015, NVIDIA CORPORATION.  All rights reserved.
</span></code></pre></td></tr></table></div></figure>


<h2>The target</h2>

<p>Now, onto our target today - a subroutine that converts a hexadecimal string to base64. I picked this up from the <a href="http://cryptopals.com/">matasano cryptography challenges</a> I&rsquo;m attempting on the side and decided it&rsquo;d be a good example for this tutorial.</p>

<p>Heres a brief overview of the algorithm itself:<br/>
1. Take 3 bytes of input hex data at a time,<br/>
2. Do some bitwise concatenation (shift and OR) and get indexes of 4 base64 characters that these 3 bytes are encoded into<br/>
3. Lookup the actual base64 characters using these indices.<br/>
..and heres a quick diagram to explain that:</p>

<p><img src="https://github.com/kmmankad/kmmankad.github.io/raw/master/images/openacc/ASCII_to_b64.PNG" title="Figure 1: Hex to Base64" alt="Diagram showing Hex to Base64 conversion" /></p>

<p>Lets look at what we&rsquo;ll start here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">encode_block</span><span class="p">(</span> <span class="kt">char</span><span class="o">*</span> <span class="n">input</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">output</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">){</span>
</span><span class='line'>      <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>      <span class="n">output</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>      <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x03</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">){</span>
</span><span class='line'>          <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">|=</span> <span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xF0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>          <span class="n">output</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>          <span class="c1">// Check if we have an (i+2)th input element</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">){</span>
</span><span class='line'>              <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">|=</span> <span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xC0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>              <span class="n">output</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x3F</span><span class="p">;</span>
</span><span class='line'>              <span class="n">output</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">3</span><span class="p">]];</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">output</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>              <span class="n">output</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;=&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="n">output</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>          <span class="n">output</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;=&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">output</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;=&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Return the code length</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usually, you&rsquo;d just throw some <code>#pragma acc</code>s at the around loops in the problem and let the compiler guide you. But, the idea of this tutorial is to help develop some analysis skills, so we&rsquo;ll look through the program first.</p>

<p>Now, the function basically takes in a character array of a fixed size, and generates an output array also of a known size (4 x input_size/3). The sizes are important to know, because the compiler needs to know how many bytes to transfer over the CPU<->GPU link. (Side note - if you dont specify those sizes clearly, the compiler will throw - <code>Accelerator restriction: size of the GPU copy of output is unknown</code>) We need to copy over the input array from the CPU to the GPU - or, Host and Device respectively in CUDA terminology. Sometimes, OpenACC documentation refers to the CPU as &lsquo;Self&rsquo; and GPU as &lsquo;Device&rsquo;. And when it is done processing, we must copy the output array back to the CPU. And, the <code>base64_LUT</code> is a common array used by all threads. So, that too will need to be on the GPU. So thats the basic data movement defined right there that you should aim to isolate first. <em>&ldquo;Whats my input? Whats my output?&rdquo;</em></p>

<p>That <code>for (i=0..</code> loop can be parallelized to operate on chunks of the input in parallel. But, hang on. The next thing I&rsquo;d like to draw your attention to is - <strong>data dependence between loop iterations</strong>. What? Where? Well, if you take a closer look at how we&rsquo;re updating the output array, you&rsquo;ll quickly realize that <code>j++</code> implies that you rely on the previous value of <code>j</code> - i.e. the previous iteration. Why is that a problem? Well, for us to run the conversion in parallel, each thread must know its input index and output index without communicating with other threads. Because, if it needed to, that&rsquo;ll defeat the purpose of parallelization - thats as good as sequential CPU code. So, thats the first thing that needs fixing.  Dont worry, the compiler will warn you about this, but it helps to develop what I like to call <em>dependence vision</em> - the ability to &ldquo;see&rdquo; the data dependence. That&rsquo;ll help you with complex code bases where things are not so obvious. Moral of the story: <em>Try to code in a way that keeps the array indices independent of the previous loop iteration, and hopefully dependent on only the current iteration</em></p>

<p>Going further, the <code>decoded_octets</code> variable is used as a scratch variable to hold 4 values that we eventually push to the output array. This means, each iteration of the loop uses it for itself - something we need to tell the compiler. This is a private variable for each iteration, or each parallel thread.</p>

<p>Because we&rsquo;re dealing with pointers to access data arrays, there is an additional complication - but I&rsquo;ll get to that later.</p>

<p>Armed with this non-zero knowledge of not-so-hidden parallelism in the program, we will now use OpenACC directives to express these ideas of parallelism and data movement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">encode_block</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">output</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// Variables for timekeeping</span>
</span><span class='line'>  <span class="n">timestruct</span> <span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">long</span> <span class="kt">long</span> <span class="n">time_elapsed</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">char</span> <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;hex2base64::encode_block: Input Len: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// i variable will track the input array position</span>
</span><span class='line'>  <span class="c1">// k variable will track the output array position</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Mark the start time</span>
</span><span class='line'>  <span class="n">gettime</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">t1</span> <span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cp">#pragma acc data present(input[0:size]), present(base64_LUT[64]), copyout(output[0:4*size/3])</span>
</span><span class='line'>  <span class="cp">#pragma acc kernels </span>
</span><span class='line'>  <span class="cp">#pragma acc loop private(decoded_octets, k)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">// Calculate the output array position based</span>
</span><span class='line'>      <span class="c1">// on the input array position (loop iteration)</span>
</span><span class='line'>      <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">i</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>      <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x03</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">){</span>
</span><span class='line'>          <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">|=</span> <span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xF0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>          <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>          <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">);</span> 
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">){</span>
</span><span class='line'>              <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">|=</span> <span class="p">((</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xC0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>              <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>              <span class="n">decoded_octets</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x3F</span><span class="p">;</span>
</span><span class='line'>              <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">3</span><span class="p">]];</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>              <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;=&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">base64_LUT</span><span class="p">[</span><span class="n">decoded_octets</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>          <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;=&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">output</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;=&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Mark the end time</span>
</span><span class='line'>  <span class="n">gettime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Compute time elapsed</span>
</span><span class='line'>  <span class="n">time_elapsed</span> <span class="o">=</span> <span class="n">usec</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Display that to the user</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;encode_block: %03ld microseconds</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">time_elapsed</span> <span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Return the code length</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="mi">4</span><span class="o">*</span><span class="n">size</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets look at the <code>#pragma</code>s required to express this parallelism. I&rsquo;ve also added some crude instrumentation to measure the elapsed time for the function as a whole.</p>

<ol>
<li><p><code>#pragma acc kernels</code>
This tells the compiler - &ldquo;Hey, I think this section of code can be parallelized. Go try and do that for me.&rdquo; Remember, pragmas are for the immediate next code block. So, this one applies to the <code>for (i=0..</code> loop. As you will soon learn, adding this macro does not mean that parallel code will be generated. The compiler will try and might fail - so watch the compile output closely for such cases.</p></li>
<li><p><code>#pragma acc data present(input[0:size]), present(base64_LUT[64]), copyout(output[0:4*size/3])</code>
Here, we&rsquo;re using the <code>present</code> clause to tell the compiler about data arrays that we will copy into GPU memory beforehand. Specifically, I have done that just before the function call to <code>encode_block</code> using the <code>copyin</code> clause. The <code>copyout</code> clause as the name suggests directs the compiler to copy out an array <code>output[0:4*size/3]</code> from the GPU to the CPU <em>at the end of the parallel thread&rsquo;s execution</em>.</p></li>
<li><p><code>#pragma acc loop private(decoded_octets, k)</code>
This one tells the compiler - &ldquo;look, the variables <code>decoded_octets</code> and <code>k</code> are <em>private</em> to each iteration of the loop, or each parallel thread. So create private copies of those variables and dont think they depend between loop iterations.</p></li>
</ol>


<p>With these changes in place, try giving it a whirl - run <code>make</code>. This is what you can expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>PGI<span class="nv">$ </span>make
</span><span class='line'>rm -rf hex2base64.obj main.obj hex2base64.exe hex2base64.dwf hex2base64.pdb
</span><span class='line'>pgcc -I. -g -fast -Minfo -acc -ta<span class="o">=</span>nvidia  -o hex2base64.exe hex2base64.c main.c
</span><span class='line'>hex2base64.c:
</span><span class='line'>encode:
</span><span class='line'> _&lt;boring part excluded <span class="k">for</span> brevity&gt;_
</span><span class='line'>     89, Generating present<span class="o">(</span>input<span class="o">[</span>:size<span class="o">]</span>,base64_LUT<span class="o">[</span>:64<span class="o">])</span>
</span><span class='line'>         Generating copyout<span class="o">(</span>output<span class="o">[</span>:?<span class="o">])</span>
</span><span class='line'>     92, Complex loop carried dependence of input-&gt;,output-&gt; prevents parallelization
</span><span class='line'>         Loop carried dependence due to exposed use of output<span class="o">[</span>:?<span class="o">]</span> prevents parallelization
</span><span class='line'>         Loop carried dependence of output-&gt; prevents parallelization
</span><span class='line'>         Loop carried backward dependence of output-&gt; prevents vectorization
</span><span class='line'>         Loop carried dependence of input-&gt; prevents parallelization
</span><span class='line'>         Loop carried backward dependence of input-&gt; prevents vectorization
</span><span class='line'>         Accelerator scalar kernel generated
</span></code></pre></td></tr></table></div></figure>


<p>Those slew of messages based on line 92 - thats our <code>for (i=0..</code> loop. Lets look at what these messages mean:
1. <code>Loop carried dependence due to exposed use of output[:?] prevents parallelization</code>
What do you mean exposed? Enter: the <strong>restrict keyword.</strong> By default, the compiler will assume that the underlying data object that a pointer points to can be manipulated by other pointers from other threads too. Super paranoid (as it should be!). So, this is perceived as &lsquo;data dependence&rsquo; and the whole story goes south. So, as a programmer we must give the compiler the assurance that only the specified pointer variable (or expressions using it) will be used to access that underlying data. So, in our case -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">encode_block</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span><span class="k">restrict</span> <span class="n">input</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="k">restrict</span> <span class="n">output</span><span class="p">){</span>
</span></code></pre></td></tr></table></div></figure>


<p>A compile will this change will see most of the issues above resolved. But the compiler still thinks there is some lingering data dependence. But, our analysis shows its all good and thread-safe. Lets reassure the compiler about the same by adding the <code>indepdent</code> clause to the <code>#pragma acc loop</code> line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#pragma acc loop private(decoded_octets, k) indepdent</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler will successfully generate a parallel <em>kernel</em> (CUDA speak for GPU function). Heres what that&rsquo;ll look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">PGI</span><span class="err">$</span> <span class="n">make</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="n">hex2base64</span><span class="p">.</span><span class="n">obj</span> <span class="n">main</span><span class="p">.</span><span class="n">obj</span> <span class="n">hex2base64</span><span class="p">.</span><span class="n">exe</span> <span class="n">hex2base64</span><span class="p">.</span><span class="n">dwf</span> <span class="n">hex2base64</span><span class="p">.</span><span class="n">pdb</span>
</span><span class='line'><span class="n">pgcc</span> <span class="o">-</span><span class="n">I</span><span class="p">.</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">fast</span> <span class="o">-</span><span class="n">Minfo</span> <span class="o">-</span><span class="n">acc</span> <span class="o">-</span><span class="n">ta</span><span class="o">=</span><span class="n">nvidia</span>  <span class="o">-</span><span class="n">o</span> <span class="n">hex2base64</span><span class="p">.</span><span class="n">exe</span> <span class="n">hex2base64</span><span class="p">.</span><span class="n">c</span> <span class="n">main</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">hex2base64</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>
</span><span class='line'><span class="nl">encode</span><span class="p">:</span>
</span><span class='line'> <span class="n">_</span><span class="o">&lt;</span><span class="n">boring</span> <span class="n">part</span> <span class="n">excluded</span> <span class="k">for</span> <span class="n">brevity</span><span class="o">&gt;</span><span class="n">_</span>
</span><span class='line'>     <span class="mi">89</span><span class="p">,</span> <span class="n">Generating</span> <span class="n">present</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="o">:</span><span class="n">size</span><span class="p">],</span><span class="n">base64_LUT</span><span class="p">[</span><span class="o">:</span><span class="mi">64</span><span class="p">])</span>
</span><span class='line'>         <span class="n">Generating</span> <span class="n">copyout</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="o">:?</span><span class="p">])</span>
</span><span class='line'><span class="mi">92</span><span class="p">,</span> <span class="n">Loop</span> <span class="n">is</span> <span class="n">parallelizable</span>
</span><span class='line'>         <span class="n">Accelerator</span> <span class="n">kernel</span> <span class="n">generated</span>
</span><span class='line'>         <span class="n">Generating</span> <span class="n">Tesla</span> <span class="n">code</span>
</span><span class='line'>         <span class="mi">92</span><span class="p">,</span> <span class="err">#</span><span class="n">pragma</span> <span class="n">acc</span> <span class="n">loop</span> <span class="n">gang</span><span class="p">,</span> <span class="n">vector</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span> <span class="cm">/* blockIdx.x threadIdx.x */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally! The line <code>Generating Tesla Code</code> simply implies that it will generate parallel code for NVIDIA hardware. Doesnt mean that my 760m GPU is a tesla class card =D. The part about &lsquo;gang&rsquo; and &lsquo;vector(128)&rsquo; is to do with the CUDA programming model.</p>

<p>Basically in CUDA, we have threads. And a collection of threads forms a thread-block. A collection of thread-blocks forms a grid. And you can express the number of threads, blocks and grids as 3 dimensional co-ordinates. Pretty handy for intuition when working with images and such.</p>

<p>Heres how that maps to OpenACC&rsquo;s hardware agnostic hierarchy:</p>

<table>
<thead>
<tr>
<th>CUDA </th>
<th> OpenACC</th>
</tr>
</thead>
<tbody>
<tr>
<td>Set of blocks (blockIdx.x) </td>
<td> Gang</td>
</tr>
<tr>
<td>Set of blocks (blockIdx.y)</td>
<td> Worker</td>
</tr>
<tr>
<td>Set of threads </td>
<td> Vector</td>
</tr>
</tbody>
</table>


<p>So, it has produced 1 gang of 128 threads (didnt create an additional notion of workers here). Thats a default value, so you can use pragma&rsquo;s to fix that to a more realistic value for our problem size. Say, 32?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#pragma acc loop private(decoded_octets, k) indepdent device_type(nvidia) vector(32)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One should always tweak the <code>vector()</code> and <code>gang()</code> constructs for optimum device utilization. Value for cores? (like Value for Money..). Most modern GPUs can support thousands of threads, but generaing extra empty threads will eat into performance because they will also be scheduled just the same as active threads and will consume slots that could have been used for some real active work on the GPU.</p>

<p>Note the <code>device_type(nvidia)</code> clause which means that this <code>vector(32)</code> will be applied only for NVIDIA devices. And with <a href="https://devblogs.nvidia.com/parallelforall/7-powerful-new-features-openacc-2-0/">OpenACC-2.0</a>, you can have different configurations of these for different devices - giving you control without sacrificing performance portability:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#pragma acc loop private(decoded_octets, k) indepdent device_type(nvidia) vector(32) \</span>
</span><span class='line'><span class="cp">device_type(radeon) vector_length(256) \</span>
</span><span class='line'><span class="cp">vector_length(16)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, its 32 for NVIDIA cards, 256 for AMD Radeon (LoL) and 16 by default if the device is neither.</p>

<h2>Code</h2>

<p>Complete code available on github at - <a href="https://github.com/kmmankad/matasano-cuda/tree/master/challenge1/openacc">matasano-cuda/tree/master/challenge1/openacc</a></p>

<p>Hope this wall of text has helped you better understand OpenACC and parallel programming in general. Thats where Part-1 of this ends. Part-2 will cover profiling, tweaking and more best practices.</p>

<p>I&rsquo;d like to thank <a href="http://www.twitter.com/JeffLarkin">@JeffLarkin</a> for releasing all this awesome training content on the internet and for patiently guiding a newbie like myself through some of the trickier bits.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Remap Dead Keys in Ubuntu]]></title>
    <link href="http://kmmankad.github.io/blog/2016/03/18/how-to-remap-dead-keys-in-ubuntu/"/>
    <updated>2016-03-18T19:14:32+05:30</updated>
    <id>http://kmmankad.github.io/blog/2016/03/18/how-to-remap-dead-keys-in-ubuntu</id>
    <content type="html"><![CDATA[<p>My personal computer is an old Lenovo G560, whose keyboard recently started showing signs of wear, with the double-quote/single-quote key being the first to give out. As someone who likes to write code, losing the quote key is a real inconvenience. Sure, I could spend some cash for a new keyboard, but what good is your knowledge in software if it can&rsquo;t help workaround hardware problems? :P</p>

<p>So I decided to implement the lost key by re-mapping an existing key to behave like it. I chose the semicolon/colon key here. The idea is simple: I&rsquo;d remap the semicolon/colon key to print single and double quotes with key modifiers (Right Alt and Shift)</p>

<p>Alt + Semicolon = Single Quote
<img src="https://www.wpclipart.com/computer/keyboard_keys/computer_key_Alt.png" width="50"> + <img src="https://www.wpclipart.com/computer/keyboard_keys/computer_key_Colon_Semicolon.png" width="50"> = <img src="https://www.wpclipart.com/computer/keyboard_keys/computer_key_Quotation_Marks.png" width="50"></p>

<p>..and, Shift + Alt + Semicolon = Double Quote
<img src="https://www.wpclipart.com/computer/keyboard_keys/large_keys/computer_key_Shift.png" width="120"> + <img src="https://www.wpclipart.com/computer/keyboard_keys/computer_key_Alt.png" width="50"> + <img src="https://www.wpclipart.com/computer/keyboard_keys/computer_key_Colon_Semicolon.png" width="50"> = <img src="https://www.wpclipart.com/computer/keyboard_keys/large_keys/computer_key_Shift.png" width="120"> + <img src="https://www.wpclipart.com/computer/keyboard_keys/computer_key_Quotation_Marks.png" width="50"></p>

<p>To achieve this, what you need to do is create a custom keyboard layout. In Ubuntu, all the keyboard layouts (for different languages and such) are located at <code>/usr/share/X11/xkb/symbols/</code>. Now, you can chose to create a new file altogether, or add a variant to an existing file. I chose the latter, so I added the following lines to the US Keyboard layout located at <code>/usr/share/X11/xkb/symbols/us</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>partial alphanumeric_keys
</span><span class='line'>xkb_symbols "kmmankad" {
</span><span class='line'>     name[Group1] = "English (US, with apostrophe|quotedbl mapped to colon|semicolon";
</span><span class='line'> 
</span><span class='line'>     include "us(basic)"
</span><span class='line'>     key &lt;AC10&gt; { [ semicolon,colon, apostrophe, quotedbl ] };
</span><span class='line'> 
</span><span class='line'>     include "level3(ralt_switch)"
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>Here, I define a new keyboard layout named <code>kmmankad</code>, and its description is specified under <code>name[Group1]</code>. The <code>include "us(basic)"</code> line includes the basic US keyboard layout, since ours is really just one key away from the default US basic. Thats what the next line is about.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> key &lt;AC10&gt; { [ semicolon,colon, apostrophe, quotedbl ] };</span></code></pre></td></tr></table></div></figure>


<p><code>AC10</code> - A (for alphanumeric). The second letter could take values from A-E (rows 1 to 5, <em>bottom to top</em> - rowA is the spacebar row) and 1-12 (key position in the row, going <em>left to right</em>). So with that co-ordinate system, we locate semicolon as <code>AC10</code>. After the key is defined, you the next four values will correspond with what the key will produce by itself, with Shift, with AltGr (usually the right Alt key), and Shift+AltGr respectively. Easy peasy.</p>

<p>Now that we have this defined, We need to update <code>/usr/share/X11/xkb/rules/evdev.xml</code> to include this new layout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;variant&gt;</span>
</span><span class='line'>      <span class="nt">&lt;configItem&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>kmmankad<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;description&gt;</span>English (US, with apostrophe|quotedbl mapped to colon|semicolon)<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/configItem&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/variant&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the name and description should match what you entered earlier in <code>/usr/share/X11/xkb/symbols/us</code>.</p>

<p>Now, restart your machine and you should have your new keyboard layout available under <code>System Settings</code> -> <code>Keyboard</code> -> <code>Text Entry</code> (see bottom right) -> <code>+</code></p>

<p>Select, Test and Done. Hope this was helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Want to CUDA?]]></title>
    <link href="http://kmmankad.github.io/blog/2016/02/29/so-you-want-to-cuda/"/>
    <updated>2016-02-29T19:12:59+05:30</updated>
    <id>http://kmmankad.github.io/blog/2016/02/29/so-you-want-to-cuda</id>
    <content type="html"><![CDATA[<p>This is a post about various available resources, and how you could go about becoming a real CUDA pro. This post isn&rsquo;t about convincing you about why you should definitely learn CUDA - I&rsquo;ll leave that to the voices in and around your head.</p>

<p>To start out, I would highly recommend going through the free MOOC from Udacity - <a href="https://www.udacity.com/course/intro-to-parallel-programming--cs344">Intro to Parallel Programming</a>. This is a course that isn&rsquo;t too technical right off the bat and yet its assignments are non-trivial and could also be a bit challenging for some. But they really help you get some real world exposure to parallel programming in general, apart from the CUDA specific knowledge you would gain in the process. The course really helps develop a &lsquo;think parallel&rsquo; mindset - which I feel is as important, (if not more) compared to the knowledge of the actual semantics of a specific programming language or platform. The best part? You can do this without any special hardware - its all in the cloud!</p>

<p>Along with the udacity course, there are a couple of great texts I would urge you guys to get:</p>

<ol>
<li><p><a href="http://www.amazon.com/CUDA-Example-Introduction-General-Purpose-Programming/dp/0131387685/ref=pd_bbs_sr_1/103-9839083-1501412?ie=UTF8&amp;s=books&amp;qid=1186428068&amp;sr=1-1">Sanders &amp; Kandrot. CUDA by Example: An Introduction to General-Purpose GPU Programming</a>
This first one is a good text for beginners because it presents a very approachable learning curve. It has lots of small code examples, something I personally like. It lives up to its title in that respect. Having digestible code examples allow you to tinker with different concepts till you get the hang of things, without the overhead of programming full assignments. The book&rsquo;s code is available for download on <a href="https://developer.nvidia.com/cuda-example">NVIDIA&rsquo;s site here</a> and serves as handy reference later on as well. However, this book does not go too deep into the application side, and the &lsquo;bigger picture&rsquo; of parallel programming. Thats where the next book is better.</p></li>
<li><p><a href="http://store.elsevier.com/Programming-Massively-Parallel-Processors/David-Kirk/isbn-9780124159921/">Kirk &amp; Hwu. Programming Massively Parallel Processors</a>
This book definitely dives a bit deeper with regard to the technical aspects. Since it was created keeping in mind a typical graduate-level course on this subject, each chapter has exercises as well. Chapter 6 on performance considerations, and Chapter 7 on floating point math are two I consider particularly important for a learner to understand early on. The chapters on computational thinking and OpenCL make this a complete text on parallel programming. In addition, the code for the case studies discussed has been made available <a href="http://www.ks.uiuc.edu/Research/vmd/projects/ece498/">freely available online.</a></p></li>
</ol>


<p>And as you get more hands-on with the programming aspects of it, you will be able to appreciate the wealth of info in the <a href="http://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html">CUDA Best Practices Guide</a>. I actually have a printed copy I refer to often.</p>

<p>Among must-read blogs, there is <a href="https://devblogs.nvidia.com/parallelforall/">NVIDIA&rsquo;s Parallel Forall blog</a> that has some really well written articles on a wide variety of topics and applications in accelerated computing. Most of the CUDA related content posted here is best understood by someone who already has a higher-than-basic understanding of CUDA. Still, do subscribe.</p>

<p>I almost forgot to mention the <a href="https://nvidia.qwiklab.com/">hands-on labs offered by NVIDIA via qwiklabs</a>. While these aren&rsquo;t anywhere as fully featured as the resources mentioned above, these serve as good exercises nonetheless. These are also in the cloud, hosted on <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html">GPU enabled AWS instances</a>.</p>

<p>Though there are lots of such free(-ish) learning resources out there, you really need access to some hardware in order to really sharpen your skills. But this does not mean you need to spend big bucks. Lots of older GPUs support CUDA, and if you&rsquo;re part of an academic institution, you could also look at <a href="https://developer.nvidia.com/academic_hw_seeding">Nvidia&rsquo;s hardware grant program</a>. You can also run your CUDA code on your multicore CPU (coming-soon-a-link-to-a-tutorial-on-how-to-do-that)</p>

<p>And finally, you need to have a project that you really want to invest your sweat and skills into. Something to tie all of this together. It could be a cryptographic algorithm, or a massively parallel numerical method or perhaps something cool in the field of machine learning. Maybe you could build a encoder/decoder for an image format. Basically, you can CUDA-fy mostly anything compute intensive around you. I&rsquo;m not saying that <em>everything</em> is going to work well with CUDA - thats the topic for another blog post. But as someone starting out, one shouldn&rsquo;t be overly picky about that.</p>

<p>Oh, and theres always <a href="http://www.stackoverflow.com/questions/tagged/cuda">stackoverflow</a>, <a href="www.reddit.com/r/CUDA">/r/CUDA</a> and <a href="https://devtalk.nvidia.com/default/board/53/accelerated-computing/">NVIDIA&rsquo;s developer forum</a> if you get stuck somewhere - or even just want to discuss your ideas.</p>

<p>As with any new endeavor, you will fail and learn a lot. But the key as always is to persevere and accept experience that comes your way, whatever the form.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replace Text in Incoming Email With Outlook VBA]]></title>
    <link href="http://kmmankad.github.io/blog/2016/02/09/replace-text-in-incoming-email-with-outlook-vba/"/>
    <updated>2016-02-09T21:38:07+05:30</updated>
    <id>http://kmmankad.github.io/blog/2016/02/09/replace-text-in-incoming-email-with-outlook-vba</id>
    <content type="html"><![CDATA[<p>After a quick and very helpful markdown tutorial over at <a href="www.markdowntutorial.com">www.markdowntutorial.com</a>, heres a post.</p>

<p>As someone who works for a large tech company, I need to write a lot of email where I need to refer to one or more bugs or commit-IDs, and manually adding hyperlinks to emails soon lost its charm. In an age where almost everything we encounter in our day that can be programmed now - surely there had to be a better way to do this. I had done some tinkering earlier with Excel VBA, but Outlook was something I never looked deeper into.</p>

<p>Some googling later, I chanced on this <a href="http://superuser.com/a/464027">superuser answer</a>, that seemed to document exactly what I wanted. Which was basically, I&rsquo;d write an email with some text like this:</p>

<blockquote><p>Please pull the fix for Bug#123456</p></blockquote>

<p>and I wanted a script to turn this into a hyperlink to a shortlink created from the Bug&rsquo;s ID# (123456), like so:</p>

<blockquote><p>Please pull the fix for <a href="http://coolbugs/123456">Bug#123456</a></p></blockquote>

<p>So, I plonked the prescribed code in from the <a href="http://superuser.com/a/464027">superuser answer</a> to see if it would work, and it didn&rsquo;t. While it did do the actual replace-text-with-a-hyperlink, it stripped the email of all formatting, and the hyperlink wasn&rsquo;t the kind I was expecting either (I wanted the link text to remain intact). Some more time reading about Outlook VBA and the MailItem class revealed that this wasn&rsquo;t the right way to tackle this when your Outlook Client uses the HTML Editor for composing and viewing email. So I decided to roll my own solution.</p>

<p>The code is available in this Github repo - <a href="https://github.com/kmmankad/OutlookEmailHyperlinker">OutlookEmailHyperlinker</a> and works with Outlook 2013. I&rsquo;m not sure if further description into its gory details is that attractive, so I&rsquo;ll keep it to this description on this for now.</p>

<p>Pull requests are most welcome!</p>

<h3>Code</h3>

<ul>
<li><a href="https://github.com/kmmankad/OutlookEmailHyperlinker">OutlookEmailHyperlinker</a></li>
</ul>


<h3>References</h3>

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/dd492012%28v=office.12%29.aspx">MSDN Reference on working with Outlook Email Bodies</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My New Blog]]></title>
    <link href="http://kmmankad.github.io/blog/2016/02/09/my-new-blog/"/>
    <updated>2016-02-09T20:33:31+05:30</updated>
    <id>http://kmmankad.github.io/blog/2016/02/09/my-new-blog</id>
    <content type="html"><![CDATA[<p>Now that I have this shiny new blog setup, here&rsquo;s where I will be continuing (albeit after more than 2 years) writing about my explorations.
My <a href="http://kmmankad.blogspot.com">older blogspot blog</a> will stay on though.</p>

<p>Here are some links on setting up <a href="http://octopress.org/">Octopress</a> with <a href="https://pages.github.com/">github pages</a> that I found useful:</p>

<ul>
<li><a href="http://paulsturgess.co.uk/blog/2013/04/24/hello-octopress-and-github-pages/">Paul Sturgess&rsquo;s Hello Octopress &amp; Github Pages</a></li>
<li><a href="http://learnaholic.me/2012/10/10/deploying-octopress-to-github-pages-and-setting-custom-subdomain-cname/">Kornelije Sajler&rsquo;s Guide On Deploying Octopress</a></li>
<li><a href="http://gangmax.me/blog/2012/05/04/add-about-page-in-octopress/">GangMax&rsquo;s post on adding custom pages to octopress</a></li>
</ul>


<p>Oh, and I&rsquo;m using the <a href="https://github.com/lucaslew/whitespace">whitespace</a> theme.</p>
]]></content>
  </entry>
  
</feed>
